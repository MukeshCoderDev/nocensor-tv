/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface RewardTesterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BUG_REPORTER_NFT"
      | "nftContract"
      | "owner"
      | "rewardTester"
      | "setValidBug"
      | "validBugs"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "BugRewarded"): EventFragment;

  encodeFunctionData(
    functionFragment: "BUG_REPORTER_NFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardTester",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidBug",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "validBugs", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "BUG_REPORTER_NFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardTester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidBug",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validBugs", data: BytesLike): Result;
}

export namespace BugRewardedEvent {
  export type InputTuple = [
    reporter: AddressLike,
    bug: string,
    tokenId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    reporter: string,
    bug: string,
    tokenId: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    reporter: string;
    bug: string;
    tokenId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RewardTester extends BaseContract {
  connect(runner?: ContractRunner | null): RewardTester;
  waitForDeployment(): Promise<this>;

  interface: RewardTesterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BUG_REPORTER_NFT: TypedContractMethod<[], [bigint], "view">;

  nftContract: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  rewardTester: TypedContractMethod<
    [reporter: AddressLike, bug: string],
    [void],
    "nonpayable"
  >;

  setValidBug: TypedContractMethod<
    [bug: string, isValid: boolean],
    [void],
    "nonpayable"
  >;

  validBugs: TypedContractMethod<[arg0: string], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BUG_REPORTER_NFT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nftContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rewardTester"
  ): TypedContractMethod<
    [reporter: AddressLike, bug: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setValidBug"
  ): TypedContractMethod<[bug: string, isValid: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validBugs"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;

  getEvent(
    key: "BugRewarded"
  ): TypedContractEvent<
    BugRewardedEvent.InputTuple,
    BugRewardedEvent.OutputTuple,
    BugRewardedEvent.OutputObject
  >;

  filters: {
    "BugRewarded(address,string,uint256,uint256)": TypedContractEvent<
      BugRewardedEvent.InputTuple,
      BugRewardedEvent.OutputTuple,
      BugRewardedEvent.OutputObject
    >;
    BugRewarded: TypedContractEvent<
      BugRewardedEvent.InputTuple,
      BugRewardedEvent.OutputTuple,
      BugRewardedEvent.OutputObject
    >;
  };
}
