/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { SessionModule, SessionModuleInterface } from "../SessionModule";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "activeSessions",
    outputs: [
      {
        internalType: "uint256",
        name: "startTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "accumulatedCost",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "contentId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "canAccess",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "configs",
    outputs: [
      {
        internalType: "uint256",
        name: "pricePerSecond",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "paymentToken",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "contentId",
        type: "uint256",
      },
    ],
    name: "endSession",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "contentId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "initData",
        type: "bytes",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "contentId",
        type: "uint256",
      },
    ],
    name: "startSession",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a85806100206000396000f3fe60806040526004361061006f5760003560e01c8063771276121161004e57806377127612146100f7578063913813ad14610120578063d5b2d1ed1461015e578063e209b6461461019b5761006f565b806298fa221461007457806326cc5583146100b257806359efcb15146100db575b600080fd5b34801561008057600080fd5b5061009b60048036038101906100969190610571565b6101c4565b6040516100a99291906105ee565b60405180910390f35b3480156100be57600080fd5b506100d960048036038101906100d49190610571565b610208565b005b6100f560048036038101906100f0919061067c565b610360565b005b34801561010357600080fd5b5061011e60048036038101906101199190610571565b610365565b005b34801561012c57600080fd5b5061014760048036038101906101429190610708565b6103e5565b604051610155929190610748565b60405180910390f35b34801561016a57600080fd5b5061018560048036038101906101809190610708565b610416565b604051610192919061078c565b60405180910390f35b3480156101a757600080fd5b506101c260048036038101906101bd91906107a7565b610476565b005b60006020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b60006001600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154116102a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029a90610878565b60405180910390fd5b60008160000154426102b591906108c7565b9050600080600085815260200190815260200160002060000154826102da91906108fb565b9050808360010160008282546102f0919061093d565b925050819055506001600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160009055505050505050565b505050565b604051806040016040528042815260200160008152506001600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015590505050565b6001602052816000526040600020602052806000526040600020600091509150508060000154908060010154905082565b6000806001600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015411905092915050565b600080838381019061048891906109af565b915091506040518060400160405280603c846104a49190610a1e565b81526020018273ffffffffffffffffffffffffffffffffffffffff168152506000808881526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050505050505050565b600080fd5b600080fd5b6000819050919050565b61054e8161053b565b811461055957600080fd5b50565b60008135905061056b81610545565b92915050565b60006020828403121561058757610586610531565b5b60006105958482850161055c565b91505092915050565b6105a78161053b565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105d8826105ad565b9050919050565b6105e8816105cd565b82525050565b6000604082019050610603600083018561059e565b61061060208301846105df565b9392505050565b600080fd5b600080fd5b600080fd5b60008083601f84011261063c5761063b610617565b5b8235905067ffffffffffffffff8111156106595761065861061c565b5b60208301915083600182028301111561067557610674610621565b5b9250929050565b60008060006040848603121561069557610694610531565b5b60006106a38682870161055c565b935050602084013567ffffffffffffffff8111156106c4576106c3610536565b5b6106d086828701610626565b92509250509250925092565b6106e5816105cd565b81146106f057600080fd5b50565b600081359050610702816106dc565b92915050565b6000806040838503121561071f5761071e610531565b5b600061072d8582860161055c565b925050602061073e858286016106f3565b9150509250929050565b600060408201905061075d600083018561059e565b61076a602083018461059e565b9392505050565b60008115159050919050565b61078681610771565b82525050565b60006020820190506107a1600083018461077d565b92915050565b600080600080606085870312156107c1576107c0610531565b5b60006107cf8782880161055c565b94505060206107e0878288016106f3565b935050604085013567ffffffffffffffff81111561080157610800610536565b5b61080d87828801610626565b925092505092959194509250565b600082825260208201905092915050565b7f4e6f206163746976652073657373696f6e000000000000000000000000000000600082015250565b600061086260118361081b565b915061086d8261082c565b602082019050919050565b6000602082019050818103600083015261089181610855565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108d28261053b565b91506108dd8361053b565b92508282039050818111156108f5576108f4610898565b5b92915050565b60006109068261053b565b91506109118361053b565b925082820261091f8161053b565b9150828204841483151761093657610935610898565b5b5092915050565b60006109488261053b565b91506109538361053b565b925082820190508082111561096b5761096a610898565b5b92915050565b600061097c826105ad565b9050919050565b61098c81610971565b811461099757600080fd5b50565b6000813590506109a981610983565b92915050565b600080604083850312156109c6576109c5610531565b5b60006109d48582860161055c565b92505060206109e58582860161099a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610a298261053b565b9150610a348361053b565b925082610a4457610a436109ef565b5b82820490509291505056fea2646970667358221220c706ae745ebff7a21e12dab6f8294dd745588c45c0886629952c33e9efc2a79564736f6c63430008140033";

type SessionModuleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SessionModuleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SessionModule__factory extends ContractFactory {
  constructor(...args: SessionModuleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SessionModule & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SessionModule__factory {
    return super.connect(runner) as SessionModule__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SessionModuleInterface {
    return new Interface(_abi) as SessionModuleInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SessionModule {
    return new Contract(address, _abi, runner) as unknown as SessionModule;
  }
}
