/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type { RewardTester, RewardTesterInterface } from "../RewardTester";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_nftContract",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "reporter",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "bug",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "BugRewarded",
    type: "event",
  },
  {
    inputs: [],
    name: "BUG_REPORTER_NFT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nftContract",
    outputs: [
      {
        internalType: "contract INFTContract",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "reporter",
        type: "address",
      },
      {
        internalType: "string",
        name: "bug",
        type: "string",
      },
    ],
    name: "rewardTester",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "bug",
        type: "string",
      },
      {
        internalType: "bool",
        name: "isValid",
        type: "bool",
      },
    ],
    name: "setValidBug",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "validBugs",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516106dd3803806106dd83398101604081905261002f91610062565b60008054336001600160a01b031991821617909155600180549091166001600160a01b0392909216919091179055610092565b60006020828403121561007457600080fd5b81516001600160a01b038116811461008b57600080fd5b9392505050565b61063c806100a16000396000f3fe6080604052600436106100595760003560e01c8063456df0b61461006557806360913685146100875780638da5cb5b146100d7578063a1e086571461010f578063d56d229d1461012f578063f3ea94481461014f57600080fd5b3661006057005b600080fd5b34801561007157600080fd5b50610085610080366004610494565b610172565b005b34801561009357600080fd5b506100c26100a23660046104eb565b805160208183018101805160028252928201919093012091525460ff1681565b60405190151581526020015b60405180910390f35b3480156100e357600080fd5b506000546100f7906001600160a01b031681565b6040516001600160a01b0390911681526020016100ce565b34801561011b57600080fd5b5061008561012a366004610528565b6101f2565b34801561013b57600080fd5b506001546100f7906001600160a01b031681565b34801561015b57600080fd5b50610164600181565b6040519081526020016100ce565b6000546001600160a01b031633146101bd5760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064015b60405180910390fd5b806002836040516101ce91906105a8565b908152604051908190036020019020805491151560ff199092169190911790555050565b6000546001600160a01b031633146102385760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064016101b4565b60028160405161024891906105a8565b9081526040519081900360200190205460ff166102965760405162461bcd60e51b815260206004820152600c60248201526b4e6f7420656c696769626c6560a01b60448201526064016101b4565b600180546040516340c10f1960e01b81526001600160a01b03858116600483015260248201939093529116906340c10f1990604401600060405180830381600087803b1580156102e557600080fd5b505af11580156102f9573d6000803e3d6000fd5b505050506000826001600160a01b031667016345785d8a000060405160006040518083038185875af1925050503d8060008114610352576040519150601f19603f3d011682016040523d82523d6000602084013e610357565b606091505b505090508061039e5760405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b60448201526064016101b4565b826001600160a01b03167f4f32495efc54306ecd3e38c36ab5b003073a4ba3427dd75e99293afed796474083600167016345785d8a00006040516103e4939291906105c4565b60405180910390a2505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261041857600080fd5b813567ffffffffffffffff80821115610433576104336103f1565b604051601f8301601f19908116603f0116810190828211818310171561045b5761045b6103f1565b8160405283815286602085880101111561047457600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156104a757600080fd5b823567ffffffffffffffff8111156104be57600080fd5b6104ca85828601610407565b925050602083013580151581146104e057600080fd5b809150509250929050565b6000602082840312156104fd57600080fd5b813567ffffffffffffffff81111561051457600080fd5b61052084828501610407565b949350505050565b6000806040838503121561053b57600080fd5b82356001600160a01b038116811461055257600080fd5b9150602083013567ffffffffffffffff81111561056e57600080fd5b61057a85828601610407565b9150509250929050565b60005b8381101561059f578181015183820152602001610587565b50506000910152565b600082516105ba818460208701610584565b9190910192915050565b60608152600084518060608401526105e3816080850160208901610584565b60208301949094525060408101919091526080601f909201601f1916010191905056fea2646970667358221220ae5269fbd121f3e290b09e2474ed38ff33859e18da466ccf0958272910508b6f64736f6c63430008140033";

type RewardTesterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RewardTesterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RewardTester__factory extends ContractFactory {
  constructor(...args: RewardTesterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _nftContract: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_nftContract, overrides || {});
  }
  override deploy(
    _nftContract: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_nftContract, overrides || {}) as Promise<
      RewardTester & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): RewardTester__factory {
    return super.connect(runner) as RewardTester__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RewardTesterInterface {
    return new Interface(_abi) as RewardTesterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): RewardTester {
    return new Contract(address, _abi, runner) as unknown as RewardTester;
  }
}
