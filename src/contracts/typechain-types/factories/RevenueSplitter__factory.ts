/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  RevenueSplitter,
  RevenueSplitterInterface,
} from "../RevenueSplitter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_libertyToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_creatorRegistry",
        type: "address",
      },
      {
        internalType: "address",
        name: "_contentRegistry",
        type: "address",
      },
      {
        internalType: "address",
        name: "_treasury",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "contentId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "creatorShare",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "platformShare",
        type: "uint256",
      },
    ],
    name: "RevenueDistributed",
    type: "event",
  },
  {
    inputs: [],
    name: "contentRegistry",
    outputs: [
      {
        internalType: "contract ContentRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "creatorRegistry",
    outputs: [
      {
        internalType: "contract CreatorRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "contentId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "distribute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "contentId",
        type: "uint256",
      },
    ],
    name: "getCreatorInfo",
    outputs: [
      {
        internalType: "uint256",
        name: "creatorId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "vault",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "libertyToken",
    outputs: [
      {
        internalType: "contract LibertyToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "platformFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "platformTreasury",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type RevenueSplitterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RevenueSplitterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RevenueSplitter__factory extends ContractFactory {
  constructor(...args: RevenueSplitterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _libertyToken: AddressLike,
    _creatorRegistry: AddressLike,
    _contentRegistry: AddressLike,
    _treasury: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _libertyToken,
      _creatorRegistry,
      _contentRegistry,
      _treasury,
      overrides || {}
    );
  }
  override deploy(
    _libertyToken: AddressLike,
    _creatorRegistry: AddressLike,
    _contentRegistry: AddressLike,
    _treasury: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _libertyToken,
      _creatorRegistry,
      _contentRegistry,
      _treasury,
      overrides || {}
    ) as Promise<
      RevenueSplitter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): RevenueSplitter__factory {
    return super.connect(runner) as RevenueSplitter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RevenueSplitterInterface {
    return new Interface(_abi) as RevenueSplitterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): RevenueSplitter {
    return new Contract(address, _abi, runner) as unknown as RevenueSplitter;
  }
}
