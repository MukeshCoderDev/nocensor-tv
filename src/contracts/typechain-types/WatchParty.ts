/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface WatchPartyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ageVerifier"
      | "createParty"
      | "joinParty"
      | "moduleManager"
      | "parties"
      | "partyCounter"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "PartyCreated" | "PartyJoined"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ageVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createParty",
    values: [BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "joinParty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "moduleManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "parties",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "partyCounter",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ageVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createParty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinParty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moduleManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "parties", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "partyCounter",
    data: BytesLike
  ): Result;
}

export namespace PartyCreatedEvent {
  export type InputTuple = [
    partyId: BigNumberish,
    host: AddressLike,
    contentId: BigNumberish
  ];
  export type OutputTuple = [partyId: bigint, host: string, contentId: bigint];
  export interface OutputObject {
    partyId: bigint;
    host: string;
    contentId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PartyJoinedEvent {
  export type InputTuple = [partyId: BigNumberish, participant: AddressLike];
  export type OutputTuple = [partyId: bigint, participant: string];
  export interface OutputObject {
    partyId: bigint;
    participant: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WatchParty extends BaseContract {
  connect(runner?: ContractRunner | null): WatchParty;
  waitForDeployment(): Promise<this>;

  interface: WatchPartyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ageVerifier: TypedContractMethod<[], [string], "view">;

  createParty: TypedContractMethod<
    [contentId: BigNumberish, isPrivate: boolean, entryFee: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  joinParty: TypedContractMethod<[partyId: BigNumberish], [void], "payable">;

  moduleManager: TypedContractMethod<[], [string], "view">;

  parties: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean, bigint] & {
        host: string;
        contentId: bigint;
        startTime: bigint;
        isPrivate: boolean;
        entryFee: bigint;
      }
    ],
    "view"
  >;

  partyCounter: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ageVerifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createParty"
  ): TypedContractMethod<
    [contentId: BigNumberish, isPrivate: boolean, entryFee: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "joinParty"
  ): TypedContractMethod<[partyId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "moduleManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "parties"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, boolean, bigint] & {
        host: string;
        contentId: bigint;
        startTime: bigint;
        isPrivate: boolean;
        entryFee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "partyCounter"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "PartyCreated"
  ): TypedContractEvent<
    PartyCreatedEvent.InputTuple,
    PartyCreatedEvent.OutputTuple,
    PartyCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PartyJoined"
  ): TypedContractEvent<
    PartyJoinedEvent.InputTuple,
    PartyJoinedEvent.OutputTuple,
    PartyJoinedEvent.OutputObject
  >;

  filters: {
    "PartyCreated(uint256,address,uint256)": TypedContractEvent<
      PartyCreatedEvent.InputTuple,
      PartyCreatedEvent.OutputTuple,
      PartyCreatedEvent.OutputObject
    >;
    PartyCreated: TypedContractEvent<
      PartyCreatedEvent.InputTuple,
      PartyCreatedEvent.OutputTuple,
      PartyCreatedEvent.OutputObject
    >;

    "PartyJoined(uint256,address)": TypedContractEvent<
      PartyJoinedEvent.InputTuple,
      PartyJoinedEvent.OutputTuple,
      PartyJoinedEvent.OutputObject
    >;
    PartyJoined: TypedContractEvent<
      PartyJoinedEvent.InputTuple,
      PartyJoinedEvent.OutputTuple,
      PartyJoinedEvent.OutputObject
    >;
  };
}
