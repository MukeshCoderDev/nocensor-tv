/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ModuleManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "attachModule"
      | "contentModules"
      | "contentRegistry"
      | "execute"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "whitelistModule"
      | "whitelistedModules"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ModuleAttached"
      | "ModuleWhitelisted"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "attachModule",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contentModules",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contentRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistModule",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedModules",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "attachModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contentModules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contentRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedModules",
    data: BytesLike
  ): Result;
}

export namespace ModuleAttachedEvent {
  export type InputTuple = [contentId: BigNumberish, module: AddressLike];
  export type OutputTuple = [contentId: bigint, module: string];
  export interface OutputObject {
    contentId: bigint;
    module: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModuleWhitelistedEvent {
  export type InputTuple = [module: AddressLike, status: boolean];
  export type OutputTuple = [module: string, status: boolean];
  export interface OutputObject {
    module: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ModuleManager extends BaseContract {
  connect(runner?: ContractRunner | null): ModuleManager;
  waitForDeployment(): Promise<this>;

  interface: ModuleManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  attachModule: TypedContractMethod<
    [contentId: BigNumberish, module: AddressLike, initData: BytesLike],
    [void],
    "nonpayable"
  >;

  contentModules: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  contentRegistry: TypedContractMethod<[], [string], "view">;

  execute: TypedContractMethod<
    [contentId: BigNumberish, data: BytesLike],
    [void],
    "payable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  whitelistModule: TypedContractMethod<
    [module: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;

  whitelistedModules: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "attachModule"
  ): TypedContractMethod<
    [contentId: BigNumberish, module: AddressLike, initData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "contentModules"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "contentRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [contentId: BigNumberish, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "whitelistModule"
  ): TypedContractMethod<
    [module: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "whitelistedModules"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "ModuleAttached"
  ): TypedContractEvent<
    ModuleAttachedEvent.InputTuple,
    ModuleAttachedEvent.OutputTuple,
    ModuleAttachedEvent.OutputObject
  >;
  getEvent(
    key: "ModuleWhitelisted"
  ): TypedContractEvent<
    ModuleWhitelistedEvent.InputTuple,
    ModuleWhitelistedEvent.OutputTuple,
    ModuleWhitelistedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "ModuleAttached(uint256,address)": TypedContractEvent<
      ModuleAttachedEvent.InputTuple,
      ModuleAttachedEvent.OutputTuple,
      ModuleAttachedEvent.OutputObject
    >;
    ModuleAttached: TypedContractEvent<
      ModuleAttachedEvent.InputTuple,
      ModuleAttachedEvent.OutputTuple,
      ModuleAttachedEvent.OutputObject
    >;

    "ModuleWhitelisted(address,bool)": TypedContractEvent<
      ModuleWhitelistedEvent.InputTuple,
      ModuleWhitelistedEvent.OutputTuple,
      ModuleWhitelistedEvent.OutputObject
    >;
    ModuleWhitelisted: TypedContractEvent<
      ModuleWhitelistedEvent.InputTuple,
      ModuleWhitelistedEvent.OutputTuple,
      ModuleWhitelistedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
