/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ContentRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ageVerifier"
      | "contentCount"
      | "contents"
      | "createContent"
      | "creatorRegistry"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ContentCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "ageVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contentCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createContent",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorRegistry",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ageVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contents", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorRegistry",
    data: BytesLike
  ): Result;
}

export namespace ContentCreatedEvent {
  export type InputTuple = [
    contentId: BigNumberish,
    creatorId: BigNumberish,
    dataCID: string
  ];
  export type OutputTuple = [
    contentId: bigint,
    creatorId: bigint,
    dataCID: string
  ];
  export interface OutputObject {
    contentId: bigint;
    creatorId: bigint;
    dataCID: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ContentRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ContentRegistry;
  waitForDeployment(): Promise<this>;

  interface: ContentRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ageVerifier: TypedContractMethod<[], [string], "view">;

  contentCount: TypedContractMethod<[], [bigint], "view">;

  contents: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint] & {
        creatorId: bigint;
        dataCID: string;
        creationTime: bigint;
      }
    ],
    "view"
  >;

  createContent: TypedContractMethod<[dataCID: string], [bigint], "nonpayable">;

  creatorRegistry: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ageVerifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "contentCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "contents"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint] & {
        creatorId: bigint;
        dataCID: string;
        creationTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createContent"
  ): TypedContractMethod<[dataCID: string], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "creatorRegistry"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ContentCreated"
  ): TypedContractEvent<
    ContentCreatedEvent.InputTuple,
    ContentCreatedEvent.OutputTuple,
    ContentCreatedEvent.OutputObject
  >;

  filters: {
    "ContentCreated(uint256,uint256,string)": TypedContractEvent<
      ContentCreatedEvent.InputTuple,
      ContentCreatedEvent.OutputTuple,
      ContentCreatedEvent.OutputObject
    >;
    ContentCreated: TypedContractEvent<
      ContentCreatedEvent.InputTuple,
      ContentCreatedEvent.OutputTuple,
      ContentCreatedEvent.OutputObject
    >;
  };
}
