/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface RevenueSplitterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "contentRegistry"
      | "creatorRegistry"
      | "distribute"
      | "getCreatorInfo"
      | "libertyToken"
      | "owner"
      | "platformFee"
      | "platformTreasury"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred" | "RevenueDistributed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "contentRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creatorRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "libertyToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "contentRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "libertyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevenueDistributedEvent {
  export type InputTuple = [
    contentId: BigNumberish,
    creatorShare: BigNumberish,
    platformShare: BigNumberish
  ];
  export type OutputTuple = [
    contentId: bigint,
    creatorShare: bigint,
    platformShare: bigint
  ];
  export interface OutputObject {
    contentId: bigint;
    creatorShare: bigint;
    platformShare: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RevenueSplitter extends BaseContract {
  connect(runner?: ContractRunner | null): RevenueSplitter;
  waitForDeployment(): Promise<this>;

  interface: RevenueSplitterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  contentRegistry: TypedContractMethod<[], [string], "view">;

  creatorRegistry: TypedContractMethod<[], [string], "view">;

  distribute: TypedContractMethod<
    [contentId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCreatorInfo: TypedContractMethod<
    [contentId: BigNumberish],
    [[bigint, string] & { creatorId: bigint; vault: string }],
    "view"
  >;

  libertyToken: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  platformFee: TypedContractMethod<[], [bigint], "view">;

  platformTreasury: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "contentRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "creatorRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "distribute"
  ): TypedContractMethod<
    [contentId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCreatorInfo"
  ): TypedContractMethod<
    [contentId: BigNumberish],
    [[bigint, string] & { creatorId: bigint; vault: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "libertyToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "platformTreasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RevenueDistributed"
  ): TypedContractEvent<
    RevenueDistributedEvent.InputTuple,
    RevenueDistributedEvent.OutputTuple,
    RevenueDistributedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RevenueDistributed(uint256,uint256,uint256)": TypedContractEvent<
      RevenueDistributedEvent.InputTuple,
      RevenueDistributedEvent.OutputTuple,
      RevenueDistributedEvent.OutputObject
    >;
    RevenueDistributed: TypedContractEvent<
      RevenueDistributedEvent.InputTuple,
      RevenueDistributedEvent.OutputTuple,
      RevenueDistributedEvent.OutputObject
    >;
  };
}
